package com.dnd.gooding.mock;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import org.springframework.util.ObjectUtils;

import com.dnd.gooding.domain.user.domain.User;
import com.dnd.gooding.domain.user.service.port.UserRepository;

public class FakeUserRepository implements UserRepository {

	private final AtomicLong autoGeneratedId = new AtomicLong(0);
	private final List<User> data = Collections.synchronizedList(new ArrayList<>());

	@Override
	public Optional<User> findByProviderAndOauthId(String provider, String oauthId) {
		return data.stream().filter(item -> item.getProvider().equals(provider) && item.getOauthId().equals(oauthId))
			.findAny();
	}

	@Override
	public Optional<User> findByUserId(Long userId) {
		return data.stream().filter(item -> item.getId().equals(userId))
			.findAny();
	}

	@Override
	public Optional<User> findByOauthId(String oauthId) {
		return data.stream().filter(item -> item.getOauthId().equals(oauthId))
			.findAny();
	}

	@Override
	public User save(User user) {
		if (user.getId() == 0L) {
			User newUser = User.builder()
				.id(autoGeneratedId.incrementAndGet())
				.nickname(user.getNickname())
				.profileImgUrl(user.getProfileImgUrl())
				.provider(user.getProvider())
				.oauthId(user.getOauthId())
				.onboards(user.getOnboards())
				.build();
			data.add(newUser);
			return newUser;
		} else {
			return user;
		}
	}

	@Override
	public void delete(User user) {
		data.removeIf(item -> item.getId().equals(user.getId()));
	}
}
