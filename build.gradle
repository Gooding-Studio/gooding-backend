buildscript {
    ext {
        queryDslVersion = "5.0.0"
        springCloudVersion = "2021.0.3"
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'com.diffplug.spotless' version '6.21.0'
}

group = 'com.dnd.gooding'
version = '1.0.0.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Web
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.9'
    implementation 'com.google.code.gson:gson:2.10.1'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // H2
    runtimeOnly 'com.h2database:h2'
    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'
    //querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    // Jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:3.+'
    testImplementation "org.testcontainers:testcontainers:1.19.0"
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()

    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

jacoco {
    toolVersion = '0.8.8'
}

tasks.jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false

        xml.destination(file("build/jacoco/jacoco.xml"))
        html.destination(file("build/jacoco/jacoco.html"))
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it,
                        exclude: [] + Qdomains)
                })
        )
    }
    finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
    def Qdomains = []
    // 패키지 + 클래스명
    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true // 활성화
            element = 'METHOD' // 메소드 단위로 커버리지 체크
            excludes = [
                "*.test.*"
            ] + Qdomains // 제외할 Qdomains 패턴 추가
        }

    }
}

sonar {
    properties {
        property("sonar.host.url", "http://localhost:9000")
        property("sonar.login", "sqp_cda979c229a81568e0c0fedd83492e13d46df057")
        property("sonar.sources", "src/main/java")
        property("sonar.tests", "src/test/java")
        property("sonar.sourceEncoding", "UTF-8")
        property("sonar.projectKey", "gooding")
        property("sonar.projectName", "gooding")
        property("sonar.test.inclusions", "**/*Test.java")
        property("sonar.exclusions", "**/test/**, **/Q*.java")
        property("sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml")
    }
}

spotless {
    java {
        target("**/*.java")
        googleJavaFormat()

        removeUnusedImports()
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}

tasks.register("addGitPreCommitHook", Copy) {
    from 'script/pre-commit'
    into '.git/hooks'
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}